TimeQuest Timing Analyzer report for eightBusInterface
Fri Jan 31 13:36:21 2025
Quartus II 64-Bit Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition


---------------------
; Table of Contents ;
---------------------
  1. Legal Notice
  2. TimeQuest Timing Analyzer Summary
  3. Parallel Compilation
  4. Clocks
  5. Slow Model Fmax Summary
  6. Slow Model Setup Summary
  7. Slow Model Hold Summary
  8. Slow Model Recovery Summary
  9. Slow Model Removal Summary
 10. Slow Model Minimum Pulse Width Summary
 11. Slow Model Setup: 'clk'
 12. Slow Model Hold: 'clk'
 13. Slow Model Minimum Pulse Width: 'clk'
 14. Setup Times
 15. Hold Times
 16. Clock to Output Times
 17. Minimum Clock to Output Times
 18. Fast Model Setup Summary
 19. Fast Model Hold Summary
 20. Fast Model Recovery Summary
 21. Fast Model Removal Summary
 22. Fast Model Minimum Pulse Width Summary
 23. Fast Model Setup: 'clk'
 24. Fast Model Hold: 'clk'
 25. Fast Model Minimum Pulse Width: 'clk'
 26. Setup Times
 27. Hold Times
 28. Clock to Output Times
 29. Minimum Clock to Output Times
 30. Multicorner Timing Analysis Summary
 31. Setup Times
 32. Hold Times
 33. Clock to Output Times
 34. Minimum Clock to Output Times
 35. Setup Transfers
 36. Hold Transfers
 37. Report TCCS
 38. Report RSKM
 39. Unconstrained Paths
 40. TimeQuest Timing Analyzer Messages



----------------
; Legal Notice ;
----------------
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.



+----------------------------------------------------------------------------------------+
; TimeQuest Timing Analyzer Summary                                                      ;
+--------------------+-------------------------------------------------------------------+
; Quartus II Version ; Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition ;
; Revision Name      ; eightBusInterface                                                 ;
; Device Family      ; Cyclone II                                                        ;
; Device Name        ; EP2C5AF256A7                                                      ;
; Timing Models      ; Final                                                             ;
; Delay Model        ; Combined                                                          ;
; Rise/Fall Delays   ; Unavailable                                                       ;
+--------------------+-------------------------------------------------------------------+


Parallel compilation was disabled, but you have multiple processors available. Enable parallel compilation to reduce compilation time.
+-------------------------------------+
; Parallel Compilation                ;
+----------------------------+--------+
; Processors                 ; Number ;
+----------------------------+--------+
; Number detected on machine ; 22     ;
; Maximum allowed            ; 1      ;
+----------------------------+--------+


+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Clocks                                                                                                                                                                          ;
+------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+---------+
; Clock Name ; Type ; Period ; Frequency  ; Rise  ; Fall  ; Duty Cycle ; Divide by ; Multiply by ; Phase ; Offset ; Edge List ; Edge Shift ; Inverted ; Master ; Source ; Targets ;
+------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+---------+
; clk        ; Base ; 1.000  ; 1000.0 MHz ; 0.000 ; 0.500 ;            ;           ;             ;       ;        ;           ;            ;          ;        ;        ; { clk } ;
+------------+------+--------+------------+-------+-------+------------+-----------+-------------+-------+--------+-----------+------------+----------+--------+--------+---------+


+--------------------------------------------------+
; Slow Model Fmax Summary                          ;
+------------+-----------------+------------+------+
; Fmax       ; Restricted Fmax ; Clock Name ; Note ;
+------------+-----------------+------------+------+
; 215.75 MHz ; 215.75 MHz      ; clk        ;      ;
+------------+-----------------+------------+------+
This panel reports FMAX for every clock in the design, regardless of the user-specified clock periods.  FMAX is only computed for paths where the source and destination registers or ports are driven by the same clock.  Paths of different clocks, including generated clocks, are ignored.  For paths between a clock and its inversion, FMAX is computed as if the rising and falling edges are scaled along with FMAX, such that the duty cycle (in terms of a percentage) is maintained. Altera recommends that you always use clock constraints and other slack reports for sign-off analysis.


+--------------------------------+
; Slow Model Setup Summary       ;
+-------+--------+---------------+
; Clock ; Slack  ; End Point TNS ;
+-------+--------+---------------+
; clk   ; -3.635 ; -272.680      ;
+-------+--------+---------------+


+-------------------------------+
; Slow Model Hold Summary       ;
+-------+-------+---------------+
; Clock ; Slack ; End Point TNS ;
+-------+-------+---------------+
; clk   ; 0.460 ; 0.000         ;
+-------+-------+---------------+


-------------------------------
; Slow Model Recovery Summary ;
-------------------------------
No paths to report.


------------------------------
; Slow Model Removal Summary ;
------------------------------
No paths to report.


+----------------------------------------+
; Slow Model Minimum Pulse Width Summary ;
+-------+--------+-----------------------+
; Clock ; Slack  ; End Point TNS         ;
+-------+--------+-----------------------+
; clk   ; -1.631 ; -162.935              ;
+-------+--------+-----------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Setup: 'clk'                                                                                                                                    ;
+--------+-----------------------------------+-----------------------------------------+--------------+-------------+--------------+------------+------------+
; Slack  ; From Node                         ; To Node                                 ; Launch Clock ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+-----------------------------------+-----------------------------------------+--------------+-------------+--------------+------------+------------+
; -3.635 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.007      ; 4.681      ;
; -3.632 ; divider:myDivider|out1[15]        ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.007      ; 4.678      ;
; -3.622 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.661      ;
; -3.619 ; divider:myDivider|out2[0]         ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.658      ;
; -3.555 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.591      ;
; -3.555 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.591      ;
; -3.554 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.590      ;
; -3.554 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.590      ;
; -3.554 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.003     ; 4.590      ;
; -3.554 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.003     ; 4.590      ;
; -3.553 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.589      ;
; -3.553 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.003     ; 4.589      ;
; -3.552 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.588      ;
; -3.552 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.003     ; 4.588      ;
; -3.550 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.586      ;
; -3.550 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.586      ;
; -3.550 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.003     ; 4.586      ;
; -3.550 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.003     ; 4.586      ;
; -3.546 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.003     ; 4.582      ;
; -3.542 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.571      ;
; -3.542 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.571      ;
; -3.541 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.570      ;
; -3.541 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.570      ;
; -3.541 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.010     ; 4.570      ;
; -3.541 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.010     ; 4.570      ;
; -3.540 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.569      ;
; -3.540 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.010     ; 4.569      ;
; -3.539 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.568      ;
; -3.539 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.010     ; 4.568      ;
; -3.537 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.566      ;
; -3.537 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.566      ;
; -3.537 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.010     ; 4.566      ;
; -3.537 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.010     ; 4.566      ;
; -3.533 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.010     ; 4.562      ;
; -3.437 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[15] ; clk          ; clk         ; 1.000        ; -0.010     ; 4.466      ;
; -3.355 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[14] ; clk          ; clk         ; 1.000        ; -0.010     ; 4.384      ;
; -3.351 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.005      ; 4.395      ;
; -3.348 ; divider:myDivider|rA[0]           ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.005      ; 4.392      ;
; -3.333 ; divider:myDivider|out2[0]         ; outputWrapper:myOutputWrapper|R_reg[15] ; clk          ; clk         ; 1.000        ; -0.011     ; 4.361      ;
; -3.273 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[13] ; clk          ; clk         ; 1.000        ; -0.010     ; 4.302      ;
; -3.271 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.005      ; 4.315      ;
; -3.271 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.305      ;
; -3.271 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.305      ;
; -3.270 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.304      ;
; -3.270 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.304      ;
; -3.270 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.304      ;
; -3.270 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.304      ;
; -3.269 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.303      ;
; -3.269 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.303      ;
; -3.268 ; divider:myDivider|rA[1]           ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.005      ; 4.312      ;
; -3.268 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.302      ;
; -3.268 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.302      ;
; -3.266 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.300      ;
; -3.266 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.300      ;
; -3.266 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.300      ;
; -3.266 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.300      ;
; -3.262 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.296      ;
; -3.251 ; divider:myDivider|out2[0]         ; outputWrapper:myOutputWrapper|R_reg[14] ; clk          ; clk         ; 1.000        ; -0.011     ; 4.279      ;
; -3.222 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.010      ; 4.271      ;
; -3.219 ; divider:myDivider|out2[1]         ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.010      ; 4.268      ;
; -3.191 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[12] ; clk          ; clk         ; 1.000        ; -0.010     ; 4.220      ;
; -3.191 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.225      ;
; -3.191 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.225      ;
; -3.190 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.224      ;
; -3.190 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.224      ;
; -3.190 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.224      ;
; -3.190 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.224      ;
; -3.189 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.223      ;
; -3.189 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.223      ;
; -3.188 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.222      ;
; -3.188 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.222      ;
; -3.186 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.220      ;
; -3.186 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.220      ;
; -3.186 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.005     ; 4.220      ;
; -3.186 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.220      ;
; -3.182 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.005     ; 4.216      ;
; -3.169 ; divider:myDivider|out2[0]         ; outputWrapper:myOutputWrapper|R_reg[13] ; clk          ; clk         ; 1.000        ; -0.011     ; 4.197      ;
; -3.156 ; divider:myDivider|out2[2]         ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.010      ; 4.205      ;
; -3.153 ; divider:myDivider|out2[2]         ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.010      ; 4.202      ;
; -3.149 ; divider:myDivider|rA[2]           ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.005      ; 4.193      ;
; -3.146 ; divider:myDivider|rA[2]           ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.005      ; 4.190      ;
; -3.142 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.181      ;
; -3.142 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.181      ;
; -3.141 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.180      ;
; -3.141 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.180      ;
; -3.141 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; 0.000      ; 4.180      ;
; -3.141 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; 0.000      ; 4.180      ;
; -3.140 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.179      ;
; -3.140 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; 0.000      ; 4.179      ;
; -3.139 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.178      ;
; -3.139 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; 0.000      ; 4.178      ;
; -3.137 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.176      ;
; -3.137 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.176      ;
; -3.137 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.176      ;
; -3.137 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; 0.000      ; 4.176      ;
; -3.133 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; 0.000      ; 4.172      ;
; -3.109 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[11] ; clk          ; clk         ; 1.000        ; -0.010     ; 4.138      ;
; -3.087 ; divider:myDivider|out2[0]         ; outputWrapper:myOutputWrapper|R_reg[12] ; clk          ; clk         ; 1.000        ; -0.011     ; 4.115      ;
; -3.076 ; divider:myDivider|out2[2]         ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.115      ;
; -3.076 ; divider:myDivider|out2[2]         ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; 0.000      ; 4.115      ;
+--------+-----------------------------------+-----------------------------------------+--------------+-------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Slow Model Hold: 'clk'                                                                                                                                                        ;
+-------+------------------------------------------------+------------------------------------------------+--------------+-------------+--------------+------------+------------+
; Slack ; From Node                                      ; To Node                                        ; Launch Clock ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+-------+------------------------------------------------+------------------------------------------------+--------------+-------------+--------------+------------+------------+
; 0.460 ; inputWrapper:myInputWrapper|counterOutput[1]   ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; inputWrapper:myInputWrapper|ps.Idle            ; inputWrapper:myInputWrapper|ps.Idle            ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; inputWrapper:myInputWrapper|ps.ReceivingData   ; inputWrapper:myInputWrapper|ps.ReceivingData   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|ps.WaitForNext     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; inputWrapper:myInputWrapper|counterOutput[0]   ; inputWrapper:myInputWrapper|counterOutput[0]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; divider:myDivider|countOut[0]                  ; divider:myDivider|countOut[0]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; divider:myDivider|countOut[1]                  ; divider:myDivider|countOut[1]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; divider:myDivider|countOut[2]                  ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; divider:myDivider|countOut[3]                  ; divider:myDivider|countOut[3]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; outputWrapper:myOutputWrapper|counterOutput[1] ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; outputWrapper:myOutputWrapper|ps.ReceivingData ; outputWrapper:myOutputWrapper|ps.ReceivingData ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; outputWrapper:myOutputWrapper|counterOutput[0] ; outputWrapper:myOutputWrapper|counterOutput[0] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; outputWrapper:myOutputWrapper|ps.Idle          ; outputWrapper:myOutputWrapper|ps.Idle          ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.460 ; divider:myDivider|ps.Process                   ; divider:myDivider|ps.Process                   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.756      ;
; 0.643 ; divider:myDivider|out2[14]                     ; divider:myDivider|out2[15]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.939      ;
; 0.646 ; inputWrapper:myInputWrapper|ps.ReceivingData   ; inputWrapper:myInputWrapper|ps.WaitForNext     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.942      ;
; 0.659 ; divider:myDivider|countOut[0]                  ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.955      ;
; 0.661 ; divider:myDivider|countOut[0]                  ; divider:myDivider|countOut[1]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.957      ;
; 0.693 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[0]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.989      ;
; 0.693 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|ps.ReceivingData ; clk          ; clk         ; 0.000        ; 0.000      ; 0.989      ;
; 0.698 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|counterOutput[0] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.994      ;
; 0.701 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[3]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.997      ;
; 0.721 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|ps.Idle            ; clk          ; clk         ; 0.000        ; 0.000      ; 1.017      ;
; 0.795 ; divider:myDivider|out1[4]                      ; divider:myDivider|out1[5]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.091      ;
; 0.799 ; divider:myDivider|out1[1]                      ; divider:myDivider|out1[2]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.095      ;
; 0.799 ; divider:myDivider|out1[10]                     ; divider:myDivider|out1[11]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.095      ;
; 0.801 ; divider:myDivider|out1[3]                      ; divider:myDivider|out1[4]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.097      ;
; 0.802 ; divider:myDivider|out1[7]                      ; divider:myDivider|out1[8]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.098      ;
; 0.803 ; divider:myDivider|out1[8]                      ; divider:myDivider|out1[9]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.099      ;
; 0.804 ; divider:myDivider|out1[12]                     ; divider:myDivider|out1[13]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.100      ;
; 0.806 ; divider:myDivider|out1[13]                     ; divider:myDivider|out1[14]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.102      ;
; 0.812 ; outputWrapper:myOutputWrapper|ps.Idle          ; outputWrapper:myOutputWrapper|ps.Loading       ; clk          ; clk         ; 0.000        ; 0.000      ; 1.108      ;
; 0.828 ; inputWrapper:myInputWrapper|ps.Idle            ; inputWrapper:myInputWrapper|ps.Init            ; clk          ; clk         ; 0.000        ; 0.000      ; 1.124      ;
; 0.886 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[4]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 1.181      ;
; 0.886 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[5]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 1.181      ;
; 0.887 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[3]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 1.182      ;
; 0.888 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[1]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 1.183      ;
; 0.888 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[2]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 1.183      ;
; 1.008 ; divider:myDivider|out2[5]                      ; divider:myDivider|out2[6]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.304      ;
; 1.018 ; divider:myDivider|out2[9]                      ; divider:myDivider|out2[10]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.314      ;
; 1.027 ; divider:myDivider|out1[2]                      ; divider:myDivider|out1[3]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.323      ;
; 1.027 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 1.323      ;
; 1.032 ; divider:myDivider|out1[9]                      ; divider:myDivider|out1[10]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.328      ;
; 1.032 ; inputWrapper:myInputWrapper|ps.Init            ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.328      ;
; 1.032 ; inputWrapper:myInputWrapper|ps.Init            ; inputWrapper:myInputWrapper|counterOutput[0]   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.328      ;
; 1.040 ; divider:myDivider|out1[6]                      ; divider:myDivider|out1[7]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.336      ;
; 1.052 ; divider:myDivider|out2[2]                      ; divider:myDivider|out2[3]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.348      ;
; 1.054 ; divider:myDivider|countOut[1]                  ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 1.350      ;
; 1.055 ; divider:myDivider|out2[8]                      ; divider:myDivider|out2[9]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.351      ;
; 1.055 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 1.351      ;
; 1.056 ; divider:myDivider|ps.Process                   ; divider:myDivider|out2[0]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.352      ;
; 1.057 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[1]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 1.353      ;
; 1.059 ; divider:myDivider|out2[6]                      ; divider:myDivider|out2[7]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.355      ;
; 1.060 ; divider:myDivider|out2[12]                     ; divider:myDivider|out2[13]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.356      ;
; 1.062 ; inputWrapper:myInputWrapper|B[0]               ; divider:myDivider|rA[0]                        ; clk          ; clk         ; 0.000        ; -0.004     ; 1.354      ;
; 1.064 ; inputWrapper:myInputWrapper|ps.Init            ; inputWrapper:myInputWrapper|ps.ReceivingData   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.360      ;
; 1.076 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; divider:myDivider|ps.Starting                  ; clk          ; clk         ; 0.000        ; 0.000      ; 1.372      ;
; 1.077 ; divider:myDivider|ps.Starting                  ; divider:myDivider|ps.Load                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.373      ;
; 1.077 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; divider:myDivider|ps.Load                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.373      ;
; 1.097 ; inputWrapper:myInputWrapper|counterOutput[0]   ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.393      ;
; 1.136 ; divider:myDivider|out1[15]                     ; divider:myDivider|out1[15]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.432      ;
; 1.142 ; divider:myDivider|err                          ; divider:myDivider|ps.Process                   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.438      ;
; 1.165 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[8]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.461      ;
; 1.165 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[0]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.461      ;
; 1.165 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[10]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.461      ;
; 1.165 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[2]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.461      ;
; 1.165 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[13]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.461      ;
; 1.165 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[5]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.461      ;
; 1.216 ; outputWrapper:myOutputWrapper|counterOutput[0] ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 1.512      ;
; 1.247 ; divider:myDivider|out1[9]                      ; outputWrapper:myOutputWrapper|Q_reg[9]         ; clk          ; clk         ; 0.000        ; -0.007     ; 1.536      ;
; 1.257 ; inputWrapper:myInputWrapper|B[15]              ; divider:myDivider|rA[15]                       ; clk          ; clk         ; 0.000        ; -0.004     ; 1.549      ;
; 1.262 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.558      ;
; 1.266 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|counterOutput[0]   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.562      ;
; 1.267 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|ps.ReceivingData   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.563      ;
; 1.297 ; divider:myDivider|countOut[3]                  ; divider:myDivider|ps.Process                   ; clk          ; clk         ; 0.000        ; 0.000      ; 1.593      ;
; 1.322 ; divider:myDivider|out1[14]                     ; outputWrapper:myOutputWrapper|Q_reg[14]        ; clk          ; clk         ; 0.000        ; -0.007     ; 1.611      ;
; 1.324 ; divider:myDivider|ps.Process                   ; divider:myDivider|out1[0]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.620      ;
; 1.329 ; divider:myDivider|out2[13]                     ; divider:myDivider|out2[14]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.625      ;
; 1.331 ; divider:myDivider|out2[4]                      ; divider:myDivider|out2[5]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.627      ;
; 1.333 ; divider:myDivider|out2[11]                     ; divider:myDivider|out2[12]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 1.629      ;
; 1.334 ; divider:myDivider|out2[3]                      ; divider:myDivider|out2[4]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.630      ;
; 1.339 ; outputWrapper:myOutputWrapper|ps.WaitForNext   ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 1.635      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[0]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[8]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[1]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[9]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[2]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[10]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[3]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[11]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[4]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[12]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[5]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[13]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[6]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[14]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[7]         ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.373 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|R_reg[15]        ; clk          ; clk         ; 0.000        ; 0.000      ; 1.669      ;
; 1.378 ; inputWrapper:myInputWrapper|counterOutput[0]   ; divider:myDivider|ps.Load                      ; clk          ; clk         ; 0.000        ; 0.000      ; 1.674      ;
; 1.382 ; inputWrapper:myInputWrapper|counterOutput[0]   ; divider:myDivider|ps.Starting                  ; clk          ; clk         ; 0.000        ; 0.000      ; 1.678      ;
+-------+------------------------------------------------+------------------------------------------------+--------------+-------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------+
; Slow Model Minimum Pulse Width: 'clk'                                                                          ;
+--------+--------------+----------------+------------------+-------+------------+-------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock ; Clock Edge ; Target                        ;
+--------+--------------+----------------+------------------+-------+------------+-------------------------------+
; -1.631 ; 1.000        ; 2.631          ; Port Rate        ; clk   ; Rise       ; clk                           ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[0] ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[0] ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[1] ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[1] ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[2] ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[2] ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[3] ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[3] ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|err         ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|err         ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[0]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[0]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[10]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[10]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[11]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[11]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[12]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[12]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[13]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[13]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[14]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[14]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[15]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[15]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[1]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[1]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[2]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[2]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[3]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[3]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[4]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[4]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[5]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[5]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[6]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[6]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[7]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[7]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[8]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[8]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[9]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[9]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[0]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[0]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[10]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[10]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[11]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[11]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[12]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[12]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[13]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[13]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[14]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[14]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[15]    ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[15]    ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[1]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[1]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[2]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[2]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[3]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[3]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[4]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[4]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[5]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[5]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[6]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[6]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[7]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[7]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[8]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[8]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[9]     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[9]     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|ps.Load     ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|ps.Load     ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|ps.Process  ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|ps.Process  ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|ps.Starting ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|ps.Starting ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[0]       ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[0]       ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[10]      ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[10]      ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[11]      ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[11]      ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[12]      ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[12]      ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[13]      ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[13]      ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[14]      ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[14]      ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[15]      ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[15]      ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[1]       ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[1]       ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[2]       ;
; -0.611 ; 0.500        ; 1.111          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[2]       ;
; -0.611 ; 0.500        ; 1.111          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[3]       ;
+--------+--------------+----------------+------------------+-------+------------+-------------------------------+


+-----------------------------------------------------------------------------+
; Setup Times                                                                 ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; dataReady       ; clk        ; 4.866 ; 4.866 ; Rise       ; clk             ;
; eightBitInp[*]  ; clk        ; 5.036 ; 5.036 ; Rise       ; clk             ;
;  eightBitInp[0] ; clk        ; 4.481 ; 4.481 ; Rise       ; clk             ;
;  eightBitInp[1] ; clk        ; 4.768 ; 4.768 ; Rise       ; clk             ;
;  eightBitInp[2] ; clk        ; 5.036 ; 5.036 ; Rise       ; clk             ;
;  eightBitInp[3] ; clk        ; 4.791 ; 4.791 ; Rise       ; clk             ;
;  eightBitInp[4] ; clk        ; 4.492 ; 4.492 ; Rise       ; clk             ;
;  eightBitInp[5] ; clk        ; 4.978 ; 4.978 ; Rise       ; clk             ;
;  eightBitInp[6] ; clk        ; 0.374 ; 0.374 ; Rise       ; clk             ;
;  eightBitInp[7] ; clk        ; 0.116 ; 0.116 ; Rise       ; clk             ;
; receiveData     ; clk        ; 5.530 ; 5.530 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+-------------------------------------------------------------------------------+
; Hold Times                                                                    ;
+-----------------+------------+--------+--------+------------+-----------------+
; Data Port       ; Clock Port ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+-----------------+------------+--------+--------+------------+-----------------+
; dataReady       ; clk        ; -4.021 ; -4.021 ; Rise       ; clk             ;
; eightBitInp[*]  ; clk        ; 0.290  ; 0.290  ; Rise       ; clk             ;
;  eightBitInp[0] ; clk        ; -4.024 ; -4.024 ; Rise       ; clk             ;
;  eightBitInp[1] ; clk        ; -4.350 ; -4.350 ; Rise       ; clk             ;
;  eightBitInp[2] ; clk        ; -4.731 ; -4.731 ; Rise       ; clk             ;
;  eightBitInp[3] ; clk        ; -3.721 ; -3.721 ; Rise       ; clk             ;
;  eightBitInp[4] ; clk        ; -4.061 ; -4.061 ; Rise       ; clk             ;
;  eightBitInp[5] ; clk        ; -4.673 ; -4.673 ; Rise       ; clk             ;
;  eightBitInp[6] ; clk        ; 0.104  ; 0.104  ; Rise       ; clk             ;
;  eightBitInp[7] ; clk        ; 0.290  ; 0.290  ; Rise       ; clk             ;
; receiveData     ; clk        ; -4.239 ; -4.239 ; Rise       ; clk             ;
+-----------------+------------+--------+--------+------------+-----------------+


+-----------------------------------------------------------------------------+
; Clock to Output Times                                                       ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; OutBuffFull     ; clk        ; 7.227 ; 7.227 ; Rise       ; clk             ;
; eightBitOut[*]  ; clk        ; 9.620 ; 9.620 ; Rise       ; clk             ;
;  eightBitOut[0] ; clk        ; 9.475 ; 9.475 ; Rise       ; clk             ;
;  eightBitOut[1] ; clk        ; 9.526 ; 9.526 ; Rise       ; clk             ;
;  eightBitOut[2] ; clk        ; 9.213 ; 9.213 ; Rise       ; clk             ;
;  eightBitOut[3] ; clk        ; 9.591 ; 9.591 ; Rise       ; clk             ;
;  eightBitOut[4] ; clk        ; 9.620 ; 9.620 ; Rise       ; clk             ;
;  eightBitOut[5] ; clk        ; 9.334 ; 9.334 ; Rise       ; clk             ;
;  eightBitOut[6] ; clk        ; 9.529 ; 9.529 ; Rise       ; clk             ;
;  eightBitOut[7] ; clk        ; 9.595 ; 9.595 ; Rise       ; clk             ;
; error           ; clk        ; 7.113 ; 7.113 ; Rise       ; clk             ;
; readyToAccept   ; clk        ; 6.856 ; 6.856 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+-----------------------------------------------------------------------------+
; Minimum Clock to Output Times                                               ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; OutBuffFull     ; clk        ; 7.227 ; 7.227 ; Rise       ; clk             ;
; eightBitOut[*]  ; clk        ; 7.446 ; 7.446 ; Rise       ; clk             ;
;  eightBitOut[0] ; clk        ; 7.512 ; 7.512 ; Rise       ; clk             ;
;  eightBitOut[1] ; clk        ; 8.284 ; 8.284 ; Rise       ; clk             ;
;  eightBitOut[2] ; clk        ; 7.457 ; 7.457 ; Rise       ; clk             ;
;  eightBitOut[3] ; clk        ; 8.320 ; 8.320 ; Rise       ; clk             ;
;  eightBitOut[4] ; clk        ; 7.524 ; 7.524 ; Rise       ; clk             ;
;  eightBitOut[5] ; clk        ; 8.085 ; 8.085 ; Rise       ; clk             ;
;  eightBitOut[6] ; clk        ; 7.446 ; 7.446 ; Rise       ; clk             ;
;  eightBitOut[7] ; clk        ; 8.357 ; 8.357 ; Rise       ; clk             ;
; error           ; clk        ; 7.113 ; 7.113 ; Rise       ; clk             ;
; readyToAccept   ; clk        ; 6.856 ; 6.856 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+--------------------------------+
; Fast Model Setup Summary       ;
+-------+--------+---------------+
; Clock ; Slack  ; End Point TNS ;
+-------+--------+---------------+
; clk   ; -0.714 ; -29.435       ;
+-------+--------+---------------+


+-------------------------------+
; Fast Model Hold Summary       ;
+-------+-------+---------------+
; Clock ; Slack ; End Point TNS ;
+-------+-------+---------------+
; clk   ; 0.203 ; 0.000         ;
+-------+-------+---------------+


-------------------------------
; Fast Model Recovery Summary ;
-------------------------------
No paths to report.


------------------------------
; Fast Model Removal Summary ;
------------------------------
No paths to report.


+----------------------------------------+
; Fast Model Minimum Pulse Width Summary ;
+-------+--------+-----------------------+
; Clock ; Slack  ; End Point TNS         ;
+-------+--------+-----------------------+
; clk   ; -1.380 ; -133.380              ;
+-------+--------+-----------------------+


+------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Setup: 'clk'                                                                                                                                    ;
+--------+-----------------------------------+-----------------------------------------+--------------+-------------+--------------+------------+------------+
; Slack  ; From Node                         ; To Node                                 ; Launch Clock ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+--------+-----------------------------------+-----------------------------------------+--------------+-------------+--------------+------------+------------+
; -0.714 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.740      ;
; -0.714 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.740      ;
; -0.714 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.740      ;
; -0.714 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.740      ;
; -0.714 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.004     ; 1.740      ;
; -0.714 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.004     ; 1.740      ;
; -0.713 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.739      ;
; -0.713 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.739      ;
; -0.713 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.004     ; 1.739      ;
; -0.713 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.004     ; 1.739      ;
; -0.713 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.732      ;
; -0.713 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.732      ;
; -0.713 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.732      ;
; -0.713 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.732      ;
; -0.713 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.011     ; 1.732      ;
; -0.713 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.011     ; 1.732      ;
; -0.712 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.731      ;
; -0.712 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.731      ;
; -0.712 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.011     ; 1.731      ;
; -0.712 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.011     ; 1.731      ;
; -0.710 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.007      ; 1.747      ;
; -0.709 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.735      ;
; -0.709 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.735      ;
; -0.709 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.004     ; 1.735      ;
; -0.709 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.004     ; 1.735      ;
; -0.709 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.739      ;
; -0.708 ; divider:myDivider|out1[15]        ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.007      ; 1.745      ;
; -0.708 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.727      ;
; -0.708 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.727      ;
; -0.708 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.011     ; 1.727      ;
; -0.708 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.011     ; 1.727      ;
; -0.707 ; divider:myDivider|out1[15]        ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.004     ; 1.733      ;
; -0.707 ; divider:myDivider|out2[0]         ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.737      ;
; -0.706 ; divider:myDivider|out2[0]         ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.011     ; 1.725      ;
; -0.621 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[15] ; clk          ; clk         ; 1.000        ; -0.009     ; 1.642      ;
; -0.610 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.633      ;
; -0.610 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.633      ;
; -0.610 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.633      ;
; -0.610 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.633      ;
; -0.610 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.633      ;
; -0.610 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.633      ;
; -0.609 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.632      ;
; -0.609 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.632      ;
; -0.609 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.632      ;
; -0.609 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.632      ;
; -0.606 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.004      ; 1.640      ;
; -0.605 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.628      ;
; -0.605 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.628      ;
; -0.605 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.628      ;
; -0.605 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.628      ;
; -0.604 ; divider:myDivider|rA[0]           ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.004      ; 1.638      ;
; -0.603 ; divider:myDivider|rA[0]           ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.626      ;
; -0.599 ; divider:myDivider|out2[0]         ; outputWrapper:myOutputWrapper|R_reg[15] ; clk          ; clk         ; 1.000        ; -0.009     ; 1.620      ;
; -0.587 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[14] ; clk          ; clk         ; 1.000        ; -0.009     ; 1.608      ;
; -0.577 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.600      ;
; -0.577 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.600      ;
; -0.577 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.600      ;
; -0.577 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.600      ;
; -0.577 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.600      ;
; -0.577 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.600      ;
; -0.576 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.599      ;
; -0.576 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.599      ;
; -0.576 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.599      ;
; -0.576 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.599      ;
; -0.573 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.004      ; 1.607      ;
; -0.572 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.595      ;
; -0.572 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.595      ;
; -0.572 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.595      ;
; -0.572 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.595      ;
; -0.571 ; divider:myDivider|rA[1]           ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.004      ; 1.605      ;
; -0.570 ; divider:myDivider|rA[1]           ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.593      ;
; -0.565 ; divider:myDivider|out2[0]         ; outputWrapper:myOutputWrapper|R_reg[14] ; clk          ; clk         ; 1.000        ; -0.009     ; 1.586      ;
; -0.555 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.585      ;
; -0.555 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.585      ;
; -0.555 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.585      ;
; -0.555 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.585      ;
; -0.555 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; 0.000      ; 1.585      ;
; -0.555 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; 0.000      ; 1.585      ;
; -0.554 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[8]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.584      ;
; -0.554 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[9]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.584      ;
; -0.554 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[12]              ; clk          ; clk         ; 1.000        ; 0.000      ; 1.584      ;
; -0.554 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[14]              ; clk          ; clk         ; 1.000        ; 0.000      ; 1.584      ;
; -0.553 ; inputWrapper:myInputWrapper|B[15] ; outputWrapper:myOutputWrapper|R_reg[13] ; clk          ; clk         ; 1.000        ; -0.009     ; 1.574      ;
; -0.551 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[0]               ; clk          ; clk         ; 1.000        ; 0.011      ; 1.592      ;
; -0.550 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[5]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.580      ;
; -0.550 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[6]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.580      ;
; -0.550 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[7]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.580      ;
; -0.550 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[13]              ; clk          ; clk         ; 1.000        ; 0.000      ; 1.580      ;
; -0.549 ; divider:myDivider|out2[1]         ; divider:myDivider|out1[0]               ; clk          ; clk         ; 1.000        ; 0.011      ; 1.590      ;
; -0.548 ; divider:myDivider|out2[1]         ; divider:myDivider|out2[10]              ; clk          ; clk         ; 1.000        ; 0.000      ; 1.578      ;
; -0.532 ; divider:myDivider|rA[2]           ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.555      ;
; -0.532 ; divider:myDivider|rA[2]           ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.555      ;
; -0.532 ; divider:myDivider|rA[2]           ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.555      ;
; -0.532 ; divider:myDivider|rA[2]           ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; -0.007     ; 1.555      ;
; -0.532 ; divider:myDivider|rA[2]           ; divider:myDivider|out2[11]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.555      ;
; -0.532 ; divider:myDivider|rA[2]           ; divider:myDivider|out2[15]              ; clk          ; clk         ; 1.000        ; -0.007     ; 1.555      ;
; -0.531 ; divider:myDivider|out2[2]         ; divider:myDivider|out2[1]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.561      ;
; -0.531 ; divider:myDivider|out2[2]         ; divider:myDivider|out2[2]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.561      ;
; -0.531 ; divider:myDivider|out2[2]         ; divider:myDivider|out2[3]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.561      ;
; -0.531 ; divider:myDivider|out2[2]         ; divider:myDivider|out2[4]               ; clk          ; clk         ; 1.000        ; 0.000      ; 1.561      ;
+--------+-----------------------------------+-----------------------------------------+--------------+-------------+--------------+------------+------------+


+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
; Fast Model Hold: 'clk'                                                                                                                                                        ;
+-------+------------------------------------------------+------------------------------------------------+--------------+-------------+--------------+------------+------------+
; Slack ; From Node                                      ; To Node                                        ; Launch Clock ; Latch Clock ; Relationship ; Clock Skew ; Data Delay ;
+-------+------------------------------------------------+------------------------------------------------+--------------+-------------+--------------+------------+------------+
; 0.203 ; inputWrapper:myInputWrapper|counterOutput[1]   ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; inputWrapper:myInputWrapper|ps.Idle            ; inputWrapper:myInputWrapper|ps.Idle            ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; inputWrapper:myInputWrapper|ps.ReceivingData   ; inputWrapper:myInputWrapper|ps.ReceivingData   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|ps.WaitForNext     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; inputWrapper:myInputWrapper|counterOutput[0]   ; inputWrapper:myInputWrapper|counterOutput[0]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; divider:myDivider|countOut[0]                  ; divider:myDivider|countOut[0]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; divider:myDivider|countOut[1]                  ; divider:myDivider|countOut[1]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; divider:myDivider|countOut[2]                  ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; divider:myDivider|countOut[3]                  ; divider:myDivider|countOut[3]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; outputWrapper:myOutputWrapper|counterOutput[1] ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; outputWrapper:myOutputWrapper|ps.ReceivingData ; outputWrapper:myOutputWrapper|ps.ReceivingData ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; outputWrapper:myOutputWrapper|counterOutput[0] ; outputWrapper:myOutputWrapper|counterOutput[0] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; outputWrapper:myOutputWrapper|ps.Idle          ; outputWrapper:myOutputWrapper|ps.Idle          ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.203 ; divider:myDivider|ps.Process                   ; divider:myDivider|ps.Process                   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.351      ;
; 0.225 ; divider:myDivider|out2[14]                     ; divider:myDivider|out2[15]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.373      ;
; 0.228 ; inputWrapper:myInputWrapper|ps.ReceivingData   ; inputWrapper:myInputWrapper|ps.WaitForNext     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.376      ;
; 0.236 ; divider:myDivider|countOut[0]                  ; divider:myDivider|countOut[1]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.384      ;
; 0.236 ; divider:myDivider|countOut[0]                  ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.384      ;
; 0.247 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|ps.ReceivingData ; clk          ; clk         ; 0.000        ; 0.000      ; 0.395      ;
; 0.248 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[0]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.396      ;
; 0.252 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|counterOutput[0] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.400      ;
; 0.254 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[3]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.402      ;
; 0.266 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|ps.Idle            ; clk          ; clk         ; 0.000        ; 0.000      ; 0.414      ;
; 0.278 ; outputWrapper:myOutputWrapper|ps.Idle          ; outputWrapper:myOutputWrapper|ps.Loading       ; clk          ; clk         ; 0.000        ; 0.000      ; 0.426      ;
; 0.289 ; inputWrapper:myInputWrapper|ps.Idle            ; inputWrapper:myInputWrapper|ps.Init            ; clk          ; clk         ; 0.000        ; 0.000      ; 0.437      ;
; 0.308 ; divider:myDivider|out1[4]                      ; divider:myDivider|out1[5]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.456      ;
; 0.309 ; divider:myDivider|out1[1]                      ; divider:myDivider|out1[2]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.457      ;
; 0.309 ; divider:myDivider|out1[10]                     ; divider:myDivider|out1[11]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.457      ;
; 0.311 ; divider:myDivider|out1[3]                      ; divider:myDivider|out1[4]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.459      ;
; 0.312 ; divider:myDivider|out1[7]                      ; divider:myDivider|out1[8]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.460      ;
; 0.312 ; divider:myDivider|out1[8]                      ; divider:myDivider|out1[9]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.460      ;
; 0.312 ; divider:myDivider|out1[12]                     ; divider:myDivider|out1[13]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.460      ;
; 0.313 ; divider:myDivider|out1[13]                     ; divider:myDivider|out1[14]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.461      ;
; 0.324 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[4]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.471      ;
; 0.324 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[5]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.471      ;
; 0.325 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[3]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.472      ;
; 0.326 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[1]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.473      ;
; 0.326 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[2]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.473      ;
; 0.342 ; divider:myDivider|out2[5]                      ; divider:myDivider|out2[6]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.490      ;
; 0.347 ; divider:myDivider|out2[9]                      ; divider:myDivider|out2[10]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.495      ;
; 0.349 ; divider:myDivider|out2[2]                      ; divider:myDivider|out2[3]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.497      ;
; 0.352 ; divider:myDivider|out2[8]                      ; divider:myDivider|out2[9]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.500      ;
; 0.353 ; divider:myDivider|out2[6]                      ; divider:myDivider|out2[7]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.501      ;
; 0.353 ; divider:myDivider|out2[12]                     ; divider:myDivider|out2[13]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.501      ;
; 0.353 ; divider:myDivider|countOut[1]                  ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.501      ;
; 0.363 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.511      ;
; 0.364 ; divider:myDivider|ps.Process                   ; divider:myDivider|out2[0]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.512      ;
; 0.364 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[2]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.512      ;
; 0.365 ; divider:myDivider|ps.Process                   ; divider:myDivider|countOut[1]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.513      ;
; 0.367 ; inputWrapper:myInputWrapper|ps.Init            ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.515      ;
; 0.369 ; inputWrapper:myInputWrapper|ps.Init            ; inputWrapper:myInputWrapper|counterOutput[0]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.517      ;
; 0.371 ; inputWrapper:myInputWrapper|ps.Init            ; inputWrapper:myInputWrapper|ps.ReceivingData   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.519      ;
; 0.373 ; divider:myDivider|ps.Starting                  ; divider:myDivider|ps.Load                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.521      ;
; 0.376 ; inputWrapper:myInputWrapper|counterOutput[0]   ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.524      ;
; 0.379 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; divider:myDivider|ps.Load                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.527      ;
; 0.384 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; divider:myDivider|ps.Starting                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.532      ;
; 0.385 ; divider:myDivider|out1[15]                     ; divider:myDivider|out1[15]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.533      ;
; 0.386 ; divider:myDivider|out1[2]                      ; divider:myDivider|out1[3]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.534      ;
; 0.387 ; divider:myDivider|err                          ; divider:myDivider|ps.Process                   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.535      ;
; 0.389 ; divider:myDivider|out1[9]                      ; divider:myDivider|out1[10]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.537      ;
; 0.392 ; divider:myDivider|out1[6]                      ; divider:myDivider|out1[7]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.540      ;
; 0.403 ; inputWrapper:myInputWrapper|B[0]               ; divider:myDivider|rA[0]                        ; clk          ; clk         ; 0.000        ; -0.004     ; 0.547      ;
; 0.426 ; outputWrapper:myOutputWrapper|counterOutput[0] ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.574      ;
; 0.435 ; divider:myDivider|out1[9]                      ; outputWrapper:myOutputWrapper|Q_reg[9]         ; clk          ; clk         ; 0.000        ; -0.006     ; 0.577      ;
; 0.438 ; inputWrapper:myInputWrapper|B[15]              ; divider:myDivider|rA[15]                       ; clk          ; clk         ; 0.000        ; -0.004     ; 0.582      ;
; 0.446 ; divider:myDivider|ps.Process                   ; divider:myDivider|out1[0]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.594      ;
; 0.448 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|counterOutput[1]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.596      ;
; 0.449 ; divider:myDivider|out2[13]                     ; divider:myDivider|out2[14]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.597      ;
; 0.450 ; divider:myDivider|out2[4]                      ; divider:myDivider|out2[5]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.598      ;
; 0.450 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|counterOutput[0]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.598      ;
; 0.451 ; divider:myDivider|out2[11]                     ; divider:myDivider|out2[12]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.599      ;
; 0.452 ; inputWrapper:myInputWrapper|ps.WaitForNext     ; inputWrapper:myInputWrapper|ps.ReceivingData   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.600      ;
; 0.456 ; divider:myDivider|out2[3]                      ; divider:myDivider|out2[4]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.604      ;
; 0.462 ; divider:myDivider|countOut[3]                  ; divider:myDivider|ps.Process                   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.610      ;
; 0.478 ; inputWrapper:myInputWrapper|counterOutput[0]   ; divider:myDivider|ps.Load                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.626      ;
; 0.483 ; outputWrapper:myOutputWrapper|ps.WaitForNext   ; outputWrapper:myOutputWrapper|counterOutput[1] ; clk          ; clk         ; 0.000        ; 0.000      ; 0.631      ;
; 0.488 ; divider:myDivider|out2[7]                      ; divider:myDivider|out2[8]                      ; clk          ; clk         ; 0.000        ; 0.000      ; 0.636      ;
; 0.488 ; divider:myDivider|out1[14]                     ; outputWrapper:myOutputWrapper|Q_reg[14]        ; clk          ; clk         ; 0.000        ; -0.006     ; 0.630      ;
; 0.489 ; inputWrapper:myInputWrapper|counterOutput[1]   ; inputWrapper:myInputWrapper|counterOutput[0]   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.637      ;
; 0.491 ; inputWrapper:myInputWrapper|counterOutput[1]   ; inputWrapper:myInputWrapper|ps.ReceivingData   ; clk          ; clk         ; 0.000        ; 0.000      ; 0.639      ;
; 0.502 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[8]         ; clk          ; clk         ; 0.000        ; 0.000      ; 0.650      ;
; 0.502 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[0]         ; clk          ; clk         ; 0.000        ; 0.000      ; 0.650      ;
; 0.502 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[10]        ; clk          ; clk         ; 0.000        ; 0.000      ; 0.650      ;
; 0.502 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[2]         ; clk          ; clk         ; 0.000        ; 0.000      ; 0.650      ;
; 0.502 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[13]        ; clk          ; clk         ; 0.000        ; 0.000      ; 0.650      ;
; 0.502 ; outputWrapper:myOutputWrapper|ps.Loading       ; outputWrapper:myOutputWrapper|Q_reg[5]         ; clk          ; clk         ; 0.000        ; 0.000      ; 0.650      ;
; 0.505 ; inputWrapper:myInputWrapper|A[15]              ; divider:myDivider|out1[15]                     ; clk          ; clk         ; 0.000        ; 0.000      ; 0.653      ;
; 0.507 ; divider:myDivider|countOut[0]                  ; divider:myDivider|countOut[3]                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.655      ;
; 0.509 ; inputWrapper:myInputWrapper|counterOutput[0]   ; divider:myDivider|ps.Starting                  ; clk          ; clk         ; 0.000        ; 0.000      ; 0.657      ;
; 0.511 ; inputWrapper:myInputWrapper|A[3]               ; divider:myDivider|out1[3]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.658      ;
; 0.513 ; inputWrapper:myInputWrapper|A[1]               ; divider:myDivider|out1[1]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.660      ;
; 0.515 ; divider:myDivider|out1[1]                      ; outputWrapper:myOutputWrapper|Q_reg[1]         ; clk          ; clk         ; 0.000        ; -0.005     ; 0.658      ;
; 0.516 ; inputWrapper:myInputWrapper|B[1]               ; divider:myDivider|rA[1]                        ; clk          ; clk         ; 0.000        ; -0.004     ; 0.660      ;
; 0.520 ; inputWrapper:myInputWrapper|B[14]              ; divider:myDivider|rA[14]                       ; clk          ; clk         ; 0.000        ; -0.004     ; 0.664      ;
; 0.520 ; inputWrapper:myInputWrapper|A[2]               ; divider:myDivider|out1[2]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.667      ;
; 0.521 ; outputWrapper:myOutputWrapper|counterOutput[0] ; outputWrapper:myOutputWrapper|ps.Idle          ; clk          ; clk         ; 0.000        ; 0.000      ; 0.669      ;
; 0.522 ; divider:myDivider|out1[6]                      ; outputWrapper:myOutputWrapper|Q_reg[6]         ; clk          ; clk         ; 0.000        ; -0.006     ; 0.664      ;
; 0.523 ; inputWrapper:myInputWrapper|B[5]               ; divider:myDivider|rA[5]                        ; clk          ; clk         ; 0.000        ; -0.004     ; 0.667      ;
; 0.523 ; inputWrapper:myInputWrapper|A[4]               ; divider:myDivider|out1[4]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.670      ;
; 0.523 ; inputWrapper:myInputWrapper|A[5]               ; divider:myDivider|out1[5]                      ; clk          ; clk         ; 0.000        ; -0.001     ; 0.670      ;
+-------+------------------------------------------------+------------------------------------------------+--------------+-------------+--------------+------------+------------+


+----------------------------------------------------------------------------------------------------------------+
; Fast Model Minimum Pulse Width: 'clk'                                                                          ;
+--------+--------------+----------------+------------------+-------+------------+-------------------------------+
; Slack  ; Actual Width ; Required Width ; Type             ; Clock ; Clock Edge ; Target                        ;
+--------+--------------+----------------+------------------+-------+------------+-------------------------------+
; -1.380 ; 1.000        ; 2.380          ; Port Rate        ; clk   ; Rise       ; clk                           ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[0] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[0] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[1] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[1] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[2] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[2] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|countOut[3] ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|countOut[3] ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|err         ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|err         ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[0]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[0]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[10]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[10]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[11]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[11]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[12]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[12]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[13]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[13]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[14]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[14]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[15]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[15]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[1]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[1]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[2]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[2]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[3]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[3]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[4]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[4]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[5]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[5]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[6]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[6]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[7]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[7]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[8]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[8]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out1[9]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out1[9]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[0]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[0]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[10]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[10]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[11]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[11]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[12]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[12]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[13]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[13]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[14]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[14]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[15]    ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[15]    ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[1]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[1]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[2]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[2]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[3]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[3]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[4]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[4]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[5]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[5]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[6]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[6]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[7]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[7]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[8]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[8]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|out2[9]     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|out2[9]     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|ps.Load     ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|ps.Load     ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|ps.Process  ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|ps.Process  ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|ps.Starting ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|ps.Starting ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[0]       ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[0]       ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[10]      ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[10]      ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[11]      ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[11]      ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[12]      ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[12]      ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[13]      ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[13]      ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[14]      ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[14]      ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[15]      ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[15]      ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[1]       ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[1]       ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[2]       ;
; -0.500 ; 0.500        ; 1.000          ; Low Pulse Width  ; clk   ; Rise       ; divider:myDivider|rA[2]       ;
; -0.500 ; 0.500        ; 1.000          ; High Pulse Width ; clk   ; Rise       ; divider:myDivider|rA[3]       ;
+--------+--------------+----------------+------------------+-------+------------+-------------------------------+


+-------------------------------------------------------------------------------+
; Setup Times                                                                   ;
+-----------------+------------+--------+--------+------------+-----------------+
; Data Port       ; Clock Port ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+-----------------+------------+--------+--------+------------+-----------------+
; dataReady       ; clk        ; 2.191  ; 2.191  ; Rise       ; clk             ;
; eightBitInp[*]  ; clk        ; 2.344  ; 2.344  ; Rise       ; clk             ;
;  eightBitInp[0] ; clk        ; 2.087  ; 2.087  ; Rise       ; clk             ;
;  eightBitInp[1] ; clk        ; 2.168  ; 2.168  ; Rise       ; clk             ;
;  eightBitInp[2] ; clk        ; 2.344  ; 2.344  ; Rise       ; clk             ;
;  eightBitInp[3] ; clk        ; 2.197  ; 2.197  ; Rise       ; clk             ;
;  eightBitInp[4] ; clk        ; 2.090  ; 2.090  ; Rise       ; clk             ;
;  eightBitInp[5] ; clk        ; 2.314  ; 2.314  ; Rise       ; clk             ;
;  eightBitInp[6] ; clk        ; -0.125 ; -0.125 ; Rise       ; clk             ;
;  eightBitInp[7] ; clk        ; -0.185 ; -0.185 ; Rise       ; clk             ;
; receiveData     ; clk        ; 2.423  ; 2.423  ; Rise       ; clk             ;
+-----------------+------------+--------+--------+------------+-----------------+


+-------------------------------------------------------------------------------+
; Hold Times                                                                    ;
+-----------------+------------+--------+--------+------------+-----------------+
; Data Port       ; Clock Port ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+-----------------+------------+--------+--------+------------+-----------------+
; dataReady       ; clk        ; -1.871 ; -1.871 ; Rise       ; clk             ;
; eightBitInp[*]  ; clk        ; 0.410  ; 0.410  ; Rise       ; clk             ;
;  eightBitInp[0] ; clk        ; -1.860 ; -1.860 ; Rise       ; clk             ;
;  eightBitInp[1] ; clk        ; -2.025 ; -2.025 ; Rise       ; clk             ;
;  eightBitInp[2] ; clk        ; -2.189 ; -2.189 ; Rise       ; clk             ;
;  eightBitInp[3] ; clk        ; -1.751 ; -1.751 ; Rise       ; clk             ;
;  eightBitInp[4] ; clk        ; -1.877 ; -1.877 ; Rise       ; clk             ;
;  eightBitInp[5] ; clk        ; -2.160 ; -2.160 ; Rise       ; clk             ;
;  eightBitInp[6] ; clk        ; 0.306  ; 0.306  ; Rise       ; clk             ;
;  eightBitInp[7] ; clk        ; 0.410  ; 0.410  ; Rise       ; clk             ;
; receiveData     ; clk        ; -1.965 ; -1.965 ; Rise       ; clk             ;
+-----------------+------------+--------+--------+------------+-----------------+


+-----------------------------------------------------------------------------+
; Clock to Output Times                                                       ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; OutBuffFull     ; clk        ; 3.431 ; 3.431 ; Rise       ; clk             ;
; eightBitOut[*]  ; clk        ; 4.250 ; 4.250 ; Rise       ; clk             ;
;  eightBitOut[0] ; clk        ; 4.155 ; 4.155 ; Rise       ; clk             ;
;  eightBitOut[1] ; clk        ; 4.180 ; 4.180 ; Rise       ; clk             ;
;  eightBitOut[2] ; clk        ; 4.043 ; 4.043 ; Rise       ; clk             ;
;  eightBitOut[3] ; clk        ; 4.207 ; 4.207 ; Rise       ; clk             ;
;  eightBitOut[4] ; clk        ; 4.250 ; 4.250 ; Rise       ; clk             ;
;  eightBitOut[5] ; clk        ; 4.128 ; 4.128 ; Rise       ; clk             ;
;  eightBitOut[6] ; clk        ; 4.189 ; 4.189 ; Rise       ; clk             ;
;  eightBitOut[7] ; clk        ; 4.223 ; 4.223 ; Rise       ; clk             ;
; error           ; clk        ; 3.429 ; 3.429 ; Rise       ; clk             ;
; readyToAccept   ; clk        ; 3.295 ; 3.295 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+-----------------------------------------------------------------------------+
; Minimum Clock to Output Times                                               ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; OutBuffFull     ; clk        ; 3.431 ; 3.431 ; Rise       ; clk             ;
; eightBitOut[*]  ; clk        ; 3.511 ; 3.511 ; Rise       ; clk             ;
;  eightBitOut[0] ; clk        ; 3.550 ; 3.550 ; Rise       ; clk             ;
;  eightBitOut[1] ; clk        ; 3.770 ; 3.770 ; Rise       ; clk             ;
;  eightBitOut[2] ; clk        ; 3.518 ; 3.518 ; Rise       ; clk             ;
;  eightBitOut[3] ; clk        ; 3.797 ; 3.797 ; Rise       ; clk             ;
;  eightBitOut[4] ; clk        ; 3.559 ; 3.559 ; Rise       ; clk             ;
;  eightBitOut[5] ; clk        ; 3.727 ; 3.727 ; Rise       ; clk             ;
;  eightBitOut[6] ; clk        ; 3.511 ; 3.511 ; Rise       ; clk             ;
;  eightBitOut[7] ; clk        ; 3.816 ; 3.816 ; Rise       ; clk             ;
; error           ; clk        ; 3.429 ; 3.429 ; Rise       ; clk             ;
; readyToAccept   ; clk        ; 3.295 ; 3.295 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+--------------------------------------------------------------------------------+
; Multicorner Timing Analysis Summary                                            ;
+------------------+----------+-------+----------+---------+---------------------+
; Clock            ; Setup    ; Hold  ; Recovery ; Removal ; Minimum Pulse Width ;
+------------------+----------+-------+----------+---------+---------------------+
; Worst-case Slack ; -3.635   ; 0.203 ; N/A      ; N/A     ; -1.631              ;
;  clk             ; -3.635   ; 0.203 ; N/A      ; N/A     ; -1.631              ;
; Design-wide TNS  ; -272.68  ; 0.0   ; 0.0      ; 0.0     ; -162.935            ;
;  clk             ; -272.680 ; 0.000 ; N/A      ; N/A     ; -162.935            ;
+------------------+----------+-------+----------+---------+---------------------+


+-----------------------------------------------------------------------------+
; Setup Times                                                                 ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; dataReady       ; clk        ; 4.866 ; 4.866 ; Rise       ; clk             ;
; eightBitInp[*]  ; clk        ; 5.036 ; 5.036 ; Rise       ; clk             ;
;  eightBitInp[0] ; clk        ; 4.481 ; 4.481 ; Rise       ; clk             ;
;  eightBitInp[1] ; clk        ; 4.768 ; 4.768 ; Rise       ; clk             ;
;  eightBitInp[2] ; clk        ; 5.036 ; 5.036 ; Rise       ; clk             ;
;  eightBitInp[3] ; clk        ; 4.791 ; 4.791 ; Rise       ; clk             ;
;  eightBitInp[4] ; clk        ; 4.492 ; 4.492 ; Rise       ; clk             ;
;  eightBitInp[5] ; clk        ; 4.978 ; 4.978 ; Rise       ; clk             ;
;  eightBitInp[6] ; clk        ; 0.374 ; 0.374 ; Rise       ; clk             ;
;  eightBitInp[7] ; clk        ; 0.116 ; 0.116 ; Rise       ; clk             ;
; receiveData     ; clk        ; 5.530 ; 5.530 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+-------------------------------------------------------------------------------+
; Hold Times                                                                    ;
+-----------------+------------+--------+--------+------------+-----------------+
; Data Port       ; Clock Port ; Rise   ; Fall   ; Clock Edge ; Clock Reference ;
+-----------------+------------+--------+--------+------------+-----------------+
; dataReady       ; clk        ; -1.871 ; -1.871 ; Rise       ; clk             ;
; eightBitInp[*]  ; clk        ; 0.410  ; 0.410  ; Rise       ; clk             ;
;  eightBitInp[0] ; clk        ; -1.860 ; -1.860 ; Rise       ; clk             ;
;  eightBitInp[1] ; clk        ; -2.025 ; -2.025 ; Rise       ; clk             ;
;  eightBitInp[2] ; clk        ; -2.189 ; -2.189 ; Rise       ; clk             ;
;  eightBitInp[3] ; clk        ; -1.751 ; -1.751 ; Rise       ; clk             ;
;  eightBitInp[4] ; clk        ; -1.877 ; -1.877 ; Rise       ; clk             ;
;  eightBitInp[5] ; clk        ; -2.160 ; -2.160 ; Rise       ; clk             ;
;  eightBitInp[6] ; clk        ; 0.306  ; 0.306  ; Rise       ; clk             ;
;  eightBitInp[7] ; clk        ; 0.410  ; 0.410  ; Rise       ; clk             ;
; receiveData     ; clk        ; -1.965 ; -1.965 ; Rise       ; clk             ;
+-----------------+------------+--------+--------+------------+-----------------+


+-----------------------------------------------------------------------------+
; Clock to Output Times                                                       ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; OutBuffFull     ; clk        ; 7.227 ; 7.227 ; Rise       ; clk             ;
; eightBitOut[*]  ; clk        ; 9.620 ; 9.620 ; Rise       ; clk             ;
;  eightBitOut[0] ; clk        ; 9.475 ; 9.475 ; Rise       ; clk             ;
;  eightBitOut[1] ; clk        ; 9.526 ; 9.526 ; Rise       ; clk             ;
;  eightBitOut[2] ; clk        ; 9.213 ; 9.213 ; Rise       ; clk             ;
;  eightBitOut[3] ; clk        ; 9.591 ; 9.591 ; Rise       ; clk             ;
;  eightBitOut[4] ; clk        ; 9.620 ; 9.620 ; Rise       ; clk             ;
;  eightBitOut[5] ; clk        ; 9.334 ; 9.334 ; Rise       ; clk             ;
;  eightBitOut[6] ; clk        ; 9.529 ; 9.529 ; Rise       ; clk             ;
;  eightBitOut[7] ; clk        ; 9.595 ; 9.595 ; Rise       ; clk             ;
; error           ; clk        ; 7.113 ; 7.113 ; Rise       ; clk             ;
; readyToAccept   ; clk        ; 6.856 ; 6.856 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+-----------------------------------------------------------------------------+
; Minimum Clock to Output Times                                               ;
+-----------------+------------+-------+-------+------------+-----------------+
; Data Port       ; Clock Port ; Rise  ; Fall  ; Clock Edge ; Clock Reference ;
+-----------------+------------+-------+-------+------------+-----------------+
; OutBuffFull     ; clk        ; 3.431 ; 3.431 ; Rise       ; clk             ;
; eightBitOut[*]  ; clk        ; 3.511 ; 3.511 ; Rise       ; clk             ;
;  eightBitOut[0] ; clk        ; 3.550 ; 3.550 ; Rise       ; clk             ;
;  eightBitOut[1] ; clk        ; 3.770 ; 3.770 ; Rise       ; clk             ;
;  eightBitOut[2] ; clk        ; 3.518 ; 3.518 ; Rise       ; clk             ;
;  eightBitOut[3] ; clk        ; 3.797 ; 3.797 ; Rise       ; clk             ;
;  eightBitOut[4] ; clk        ; 3.559 ; 3.559 ; Rise       ; clk             ;
;  eightBitOut[5] ; clk        ; 3.727 ; 3.727 ; Rise       ; clk             ;
;  eightBitOut[6] ; clk        ; 3.511 ; 3.511 ; Rise       ; clk             ;
;  eightBitOut[7] ; clk        ; 3.816 ; 3.816 ; Rise       ; clk             ;
; error           ; clk        ; 3.429 ; 3.429 ; Rise       ; clk             ;
; readyToAccept   ; clk        ; 3.295 ; 3.295 ; Rise       ; clk             ;
+-----------------+------------+-------+-------+------------+-----------------+


+-------------------------------------------------------------------+
; Setup Transfers                                                   ;
+------------+----------+----------+----------+----------+----------+
; From Clock ; To Clock ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+------------+----------+----------+----------+----------+----------+
; clk        ; clk      ; 1852     ; 0        ; 0        ; 0        ;
+------------+----------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


+-------------------------------------------------------------------+
; Hold Transfers                                                    ;
+------------+----------+----------+----------+----------+----------+
; From Clock ; To Clock ; RR Paths ; FR Paths ; RF Paths ; FF Paths ;
+------------+----------+----------+----------+----------+----------+
; clk        ; clk      ; 1852     ; 0        ; 0        ; 0        ;
+------------+----------+----------+----------+----------+----------+
Entries labeled "false path" only account for clock-to-clock false paths and not path-based false paths. As a result, actual path counts may be lower than reported.


---------------
; Report TCCS ;
---------------
No dedicated SERDES Transmitter circuitry present in device or used in design


---------------
; Report RSKM ;
---------------
No dedicated SERDES Receiver circuitry present in device or used in design


+------------------------------------------------+
; Unconstrained Paths                            ;
+---------------------------------+-------+------+
; Property                        ; Setup ; Hold ;
+---------------------------------+-------+------+
; Illegal Clocks                  ; 0     ; 0    ;
; Unconstrained Clocks            ; 0     ; 0    ;
; Unconstrained Input Ports       ; 11    ; 11   ;
; Unconstrained Input Port Paths  ; 174   ; 174  ;
; Unconstrained Output Ports      ; 11    ; 11   ;
; Unconstrained Output Port Paths ; 51    ; 51   ;
+---------------------------------+-------+------+


+------------------------------------+
; TimeQuest Timing Analyzer Messages ;
+------------------------------------+
Info: *******************************************************************
Info: Running Quartus II 64-Bit TimeQuest Timing Analyzer
    Info: Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition
    Info: Processing started: Fri Jan 31 13:36:20 2025
Info: Command: quartus_sta eightBusInterface -c eightBusInterface
Info: qsta_default_script.tcl version: #1
Warning (20028): Parallel compilation is not licensed and has been disabled
Info (21077): Low junction temperature is -40 degrees C
Info (21077): High junction temperature is 125 degrees C
Critical Warning (332012): Synopsys Design Constraints File file not found: 'eightBusInterface.sdc'. A Synopsys Design Constraints File is required by the TimeQuest Timing Analyzer to get proper timing constraints. Without it, the Compiler will not properly optimize the design.
Info (332142): No user constrained base clocks found in the design. Calling "derive_clocks -period 1.0"
Info (332105): Deriving Clocks
    Info (332105): create_clock -period 1.000 -name clk clk
Info: Found TIMEQUEST_REPORT_SCRIPT_INCLUDE_DEFAULT_ANALYSIS = ON
Info: Analyzing Slow Model
Critical Warning (332148): Timing requirements not met
Info (332146): Worst-case setup slack is -3.635
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -3.635      -272.680 clk 
Info (332146): Worst-case hold slack is 0.460
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):     0.460         0.000 clk 
Info (332140): No Recovery paths to report
Info (332140): No Removal paths to report
Info (332146): Worst-case minimum pulse width slack is -1.631
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.631      -162.935 clk 
Info (332001): The selected device family is not supported by the report_metastability command.
Info: Analyzing Fast Model
Critical Warning (332148): Timing requirements not met
Info (332146): Worst-case setup slack is -0.714
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -0.714       -29.435 clk 
Info (332146): Worst-case hold slack is 0.203
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):     0.203         0.000 clk 
Info (332140): No Recovery paths to report
Info (332140): No Removal paths to report
Info (332146): Worst-case minimum pulse width slack is -1.380
    Info (332119):     Slack End Point TNS Clock 
    Info (332119): ========= ============= =====================
    Info (332119):    -1.380      -133.380 clk 
Info (332001): The selected device family is not supported by the report_metastability command.
Info (332102): Design is not fully constrained for setup requirements
Info (332102): Design is not fully constrained for hold requirements
Info: Quartus II 64-Bit TimeQuest Timing Analyzer was successful. 0 errors, 4 warnings
    Info: Peak virtual memory: 4539 megabytes
    Info: Processing ended: Fri Jan 31 13:36:21 2025
    Info: Elapsed time: 00:00:01
    Info: Total CPU time (on all processors): 00:00:01


